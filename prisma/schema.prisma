// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  image     String?
  isWorking Boolean?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  passwordResetToken   String? // token hash (opcional)
  passwordResetExpires DateTime? // data de expiração (opcional)

  events   Event[]
  comments Comment[]
  sessions Session[]

  Project Project[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id                  String      @id @default(cuid())
  title               String
  slug                String      @unique
  description         String
  longDescription     String?     @db.Text
  location            String
  date                DateTime
  time                String
  contact             String
  prize               String
  image               String?
  category            String
  categoryColor       String
  secondCategory      String?
  secondCategoryColor String?
  status              EventStatus @default(PENDING)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments Comment[]

  Project Project[]
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  award       String?
  image       String?
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Int      @default(0)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  parentId String?
  isReply  Boolean @default(false)
}

enum Role {
  USER
  ADMIN
  ROOT
}

enum EventStatus {
  PENDING
  APPROVED
  REJECTED
}
